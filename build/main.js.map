{"mappings":"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","sources":["src/index.js","src/utils.js"],"sourcesContent":["import {\n  eventsStack,\n  clone,\n  createEvent,\n  listenerExists,\n  splitEvents,\n} from './utils';\n\n/**\n * Adds a new bus event callback or event listener\n * @param {string|Element} first bus event name or dom element\n * @param {string|Function} middle bus event callback or event type\n * @param {Function|undefined} last listener callback\n * @param {Object} opts event type options\n */\nexport const on = (first, middle, last = undefined, opts = {}) => {\n  const e = splitEvents(!last ? first : middle);\n\n  if (!last) {\n    for (let i = 0; i < e.length; i++) {\n      const ev = e[i];\n\n      if (listenerExists(ev, middle)) return;\n\n      createEvent(ev);\n\n      middle && eventsStack[ev].push(middle);\n    }\n  } else {\n    for (let i = 0; i < e.length; i++) {\n      const ev = e[i];\n      first.addEventListener(ev, last, opts);\n    }\n  }\n};\n\n/**\n * Removes a bus event callback or event listener\n * @param {string|Element} first bus event name or dom element\n * @param {string|Function} middle bus event callback or event type\n * @param {Function|undefined} last listener callback\n */\nexport const off = (first, middle, last) => {\n  const e = splitEvents(!last ? first : middle);\n\n  if (!last) {\n    for (let i = 0; i < e.length; i++) {\n      const ev = e[i];\n\n      if (!listenerExists(ev, middle)) return;\n\n      eventsStack[ev].splice(eventsStack[ev].indexOf(middle), 1);\n    }\n  } else {\n    for (let i = 0; i < e.length; i++) {\n      const ev = e[i];\n      first.removeEventListener(ev, last);\n    }\n  }\n};\n\n/**\n * Adds the event and removes it after the first occurrence\n * @param {string|Element} first bus event name or dom element\n * @param {string|Function} middle bus event callback or event type\n * @param {Function|undefined} last listener callback\n * @param {Object} opts event type options\n */\nexport const once = (first, middle, last = undefined, opts = {}) => {\n  if (!last) {\n    const fn = async () => {\n      off(first, fn);\n      await middle();\n    };\n\n    on(first, fn);\n  } else {\n    const fn = () => {\n      last();\n      off(first, middle, fn);\n    };\n\n    on(first, middle, fn, opts);\n  }\n};\n\n/**\n * Emits the given event\n * @param {string} event bus event name\n * @param  {...any} params optional parameters for the callbacks\n */\nexport const emit = (event, ...params) => {\n  if (!eventsStack[event]) return;\n\n  for (let i = 0; i < eventsStack[event].length; i++) {\n    eventsStack[event][i](...params);\n  }\n};\n\n/**\n * Emits the given event asyncronously\n * @param {string} event bus event name\n * @param  {...any} params optional parameters for the callbacks\n */\nexport const emitAsync = (event, ...params) => {\n  if (!eventsStack[event]) return;\n\n  return Promise.all(\n    eventsStack[event].map((cb) => Promise.resolve(cb(...params)))\n  );\n};\n\n/**\n * Returns a clone of the events stack. Usefull for debugging\n * @returns Object\n */\nexport const inspect = () => clone();\n","export const eventsStack = {};\n\nexport const clone = () => ({ ...eventsStack });\n\nexport const createEvent = (event) =>\n  (eventsStack[event] = eventsStack[event] || []);\n\nexport const listenerExists = (event, cb) => !!eventsStack[event]?.includes(cb);\n\nexport const splitEvents = (events) => events.split(' ');\n"],"names":[],"version":3,"file":"main.js.map"}