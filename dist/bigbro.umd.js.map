{"version":3,"file":"bigbro.umd.js","sources":["../src/index.ts"],"sourcesContent":["const bus = new Map<string, Set<any>>();\n\n/**\n * Add one or more event listeners or register a callback to one or more events\n *\n * @param events the name of one or more events\n * @param domOrCb the dom element or bus callback\n * @param listener the dom event listener\n * @param options the dom event options\n */\nconst on = <\n  T extends keyof GlobalEventHandlersEventMap,\n  D extends { addEventListener: any }\n>(\n  events: T | string,\n  domOrCb: D | Function,\n  listener?: (ev: GlobalEventHandlersEventMap[T]) => void,\n  options: boolean | AddEventListenerOptions = false\n) => {\n  events\n    .split(' ')\n    .forEach((event) =>\n      listener && typeof domOrCb !== 'function'\n        ? domOrCb.addEventListener(event, listener, options)\n        : bus.set(event, new Set()).get(event)?.add(domOrCb)\n    );\n};\n\n/**\n * Remove one or more event listeners or detatches a callback from on or more events\n *\n * @param events the name of one or more events\n * @param domOrCb the dom element or bus callback\n * @param listener the dom event listener\n */\nconst off = <\n  T extends keyof GlobalEventHandlersEventMap,\n  D extends { removeEventListener: any }\n>(\n  events: T | string,\n  domOrCb: D | Function,\n  listener?: (ev: GlobalEventHandlersEventMap[T]) => void\n) => {\n  events\n    .split(' ')\n    .forEach((event) =>\n      listener && typeof domOrCb !== 'function'\n        ? domOrCb.removeEventListener(event, listener)\n        : bus.get(event)?.delete(domOrCb)\n    );\n};\n\n/**\n * Emit the desired event\n *\n * @param event the name of the event\n * @param args the arguments that will be passed to the callbacks\n */\nconst emit = <Targs extends any[]>(event: string, ...args: Targs) => {\n  bus.get(event)?.forEach((domOrCb) => domOrCb(...args));\n};\n\n/**\n * Emit the desired event asynchronously\n *\n * @param event the name of the event\n * @param args the arguments that will be passed to the callbacks\n * @returns the promise\n */\nconst emitAsync = <P extends any[], Targs extends any[]>(\n  event: string,\n  ...args: Targs\n) => {\n  return Promise.all(\n    [...(bus.get(event) || [])].map((domOrCb) =>\n      Promise.resolve(domOrCb(...args) as P)\n    )\n  );\n};\n\n/**\n * Remove one or more events from the stack\n *\n * @param events the name of one or more events\n */\nconst remove = (events: string) => {\n  events.split(' ').forEach((event) => bus.delete(event));\n};\n\n/**\n * Generate a clone of the bus stack, usefull for debug\n *\n * @returns a clone of the bus stack\n */\nconst inspect = () => new Map(bus);\n\nexport { on, off, emit, emitAsync, remove, inspect };\n"],"names":[],"mappings":"8NAAA,KAAM,MAAU,KAUV,EAAK,CAIT,EACA,EACA,EACA,EAA6C,KAC1C,CACH,EACG,MAAM,GAAG,EACT,QAAQ,AAAC,UACR,UAAY,MAAO,IAAY,WAC3B,EAAQ,iBAAiB,EAAO,EAAU,CAAO,EACjD,KAAI,IAAI,EAAO,GAAI,IAAK,EAAE,IAAI,CAAK,IAAnC,cAAsC,IAAI,GAChD,CACJ,EASM,EAAM,CAIV,EACA,EACA,IACG,CAEA,EAAA,MAAM,GAAG,EACT,QAAQ,AAAC,UACR,UAAY,MAAO,IAAY,WAC3B,EAAQ,oBAAoB,EAAO,CAAQ,EAC3C,KAAI,IAAI,CAAK,IAAb,cAAgB,OAAO,GAC7B,CACJ,EAQM,EAAO,CAAsB,KAAkB,IAAgB,OAC/D,KAAA,IAAI,CAAK,IAAT,QAAY,QAAQ,AAAC,GAAY,EAAQ,GAAG,CAAI,EACtD,EASM,EAAY,CAChB,KACG,IAEI,QAAQ,IACb,CAAC,GAAI,EAAI,IAAI,CAAK,GAAK,EAAG,EAAE,IAAI,AAAC,GAC/B,QAAQ,QAAQ,EAAQ,GAAG,CAAI,CAAM,CACvC,CACF,EAQI,EAAS,AAAC,GAAmB,CAC1B,EAAA,MAAM,GAAG,EAAE,QAAQ,AAAC,GAAU,EAAI,OAAO,CAAK,CAAC,CACxD,EAOM,EAAU,IAAM,GAAI,KAAI,CAAG"}