{"version":3,"file":"bigbro.es.js","sources":["../src/index.ts"],"sourcesContent":["const bus = new Map<string, Set<any>>();\n\n/**\n * Add one or more event listeners or register a callback to one or more events\n *\n * @param events the name of one or more events\n * @param domOrCb the dom element or bus callback\n * @param listener the dom event listener\n * @param options the dom event options\n */\nconst on = <\n  T extends keyof GlobalEventHandlersEventMap,\n  D extends { addEventListener: any }\n>(\n  events: T | string,\n  domOrCb: D | Function,\n  listener?: (ev: GlobalEventHandlersEventMap[T]) => void,\n  options: boolean | AddEventListenerOptions = false\n) => {\n  events\n    .split(' ')\n    .forEach((event) =>\n      listener && typeof domOrCb !== 'function'\n        ? domOrCb.addEventListener(event, listener, options)\n        : bus.set(event, new Set()).get(event)?.add(domOrCb)\n    );\n};\n\n/**\n * Remove one or more event listeners or detatches a callback from on or more events\n *\n * @param events the name of one or more events\n * @param domOrCb the dom element or bus callback\n * @param listener the dom event listener\n */\nconst off = <\n  T extends keyof GlobalEventHandlersEventMap,\n  D extends { removeEventListener: any }\n>(\n  events: T,\n  domOrCb: D,\n  listener?: (ev: GlobalEventHandlersEventMap[T]) => void\n) => {\n  events\n    .split(' ')\n    .forEach((event) =>\n      listener && typeof domOrCb !== 'function'\n        ? domOrCb.removeEventListener(event, listener)\n        : bus.get(event)?.delete(domOrCb)\n    );\n};\n\n/**\n * Emit the desired event\n *\n * @param event the name of the event\n * @param args the arguments that will be passed to the callbacks\n */\nconst emit = <Targs extends any[]>(event: string, ...args: Targs) => {\n  bus.get(event)?.forEach((domOrCb) => domOrCb(...args));\n};\n\n/**\n * Emit the desired event asynchronously\n *\n * @param event the name of the event\n * @param args the arguments that will be passed to the callbacks\n * @returns the promise\n */\nconst emitAsync = <P extends any[], Targs extends any[]>(\n  event: string,\n  ...args: Targs\n) => {\n  return Promise.all(\n    [...(bus.get(event) || [])].map((domOrCb) =>\n      Promise.resolve(domOrCb(...args) as P)\n    )\n  );\n};\n\n/**\n * Remove one or more events from the stack\n *\n * @param events the name of one or more events\n */\nconst remove = (events: string) => {\n  events.split(' ').forEach((event) => bus.delete(event));\n};\n\n/**\n * Generate a clone of the bus stack, usefull for debug\n *\n * @returns a clone of the bus stack\n */\nconst inspect = () => new Map(bus);\n\nexport { on, off, emit, emitAsync, remove, inspect };\n"],"names":[],"mappings":"AAAA,MAAM,wBAAU,OAUV,IAAK,CAIT,GACA,GACA,GACA,IAA6C,OAC1C;AACH,IACG,MAAM,GAAG,EACT,QAAQ,CAAC;AArBd;AAsBM,gBAAY,OAAO,KAAY,aAC3B,EAAQ,iBAAiB,GAAO,GAAU,CAAO,IACjD,OAAI,IAAI,GAAO,oBAAI,IAAI,CAAC,EAAE,IAAI,CAAK,MAAnC,kBAAsC,IAAI;AAAA,GAChD;AACJ,GASM,IAAM,CAIV,GACA,GACA,MACG;AAEA,IAAA,MAAM,GAAG,EACT,QAAQ,CAAC;AA7Cd;AA8CM,gBAAY,OAAO,KAAY,aAC3B,EAAQ,oBAAoB,GAAO,CAAQ,IAC3C,OAAI,IAAI,CAAK,MAAb,kBAAgB,OAAO;AAAA,GAC7B;AACJ,GAQM,IAAO,CAAsB,MAAkB,MAAgB;AA1DrE;AA2DM,SAAA,IAAI,CAAK,MAAT,UAAY,QAAQ,CAAC,MAAY,EAAQ,GAAG,CAAI;AACtD,GASM,IAAY,CAChB,MACG,MAEI,QAAQ,IACb,CAAC,GAAI,EAAI,IAAI,CAAK,KAAK,EAAG,EAAE,IAAI,CAAC,MAC/B,QAAQ,QAAQ,EAAQ,GAAG,CAAI,CAAM,CACvC,CACF,GAQI,IAAS,CAAC,MAAmB;AAC1B,IAAA,MAAM,GAAG,EAAE,QAAQ,CAAC,MAAU,EAAI,OAAO,CAAK,CAAC;AACxD,GAOM,IAAU,MAAM,IAAI,IAAI,CAAG;"}